name: Ejecutar Análisis - Vulnerabilidades con Snyk

on: 
  push: 
    # Se activa el análisis en cada push al repositorio.
  pull_request: 
    # Se activa el análisis en cada pull request.

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout del código
      - name: Checkout del código
        uses: actions/checkout@v2
        # Obtiene el código fuente del repositorio.

      # Configurar PHP
      - name: Configurar PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'  # Ajusta la versión de PHP según sea necesario.
          coverage: none

      # Instalar dependencias de Composer
      - name: Instalar dependencias de Composer
        run: |
          cd biblioteca
          composer install
        # Cambia al directorio biblioteca e instala las dependencias necesarias.

      # Instalar Snyk CLI
      - name: Instalar Snyk CLI
        run: npm install -g snyk
        # Instala la CLI de Snyk para realizar análisis de seguridad.

      # Ejecutar Snyk para verificar vulnerabilidades y generar archivo SARIF y HTML
      - name: Ejecutar Snyk para verificar vulnerabilidades
        run: |
          cd biblioteca  # Cambiar al directorio donde está composer.json
          snyk test --file=composer.json --sarif-file-output=snyk-code.sarif --json-file-output=snyk-report.json
          mkdir -p ../reports  # Crear la carpeta "reports" si no existe
          snyk-to-html -i snyk-report.json -o ../reports/snyk-report.html
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Cargar el archivo SARIF a GitHub Code Scanning
      - name: Upload SARIF result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: biblioteca/snyk-code.sarif

      # Subir el archivo HTML como artefacto
      - name: Upload HTML result
        uses: actions/upload-artifact@v3
        with:
          name: snyk-html-report
          path: reports/snyk-report.html
